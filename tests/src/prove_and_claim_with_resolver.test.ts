import { processTest, populateTransaction } from "./test.fixture";

const contractName = "DNSRegistrar"; // <= Name of the smart contract

const testLabel = "dns_registrar_prove_claim_with_resolver"; // <= Name of the test
const testDirSuffix = "dns_registrar_prove_claim_with_resolver"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x58774bb8acd458a640af0b88238369a167546ef2"; // <= Address of the smart contract
const chainID = 1;

// From : https://etherscan.io/tx/0x39544a43c7be74d230e606194444401995de781b095ca5ec167554ab70303841
const inputData = 
  "0x224199c200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000231b0ee14048e9dccd1d247744d114a4eb5e8e630000000000000000000000003b6cfb1dd511af91f23f4da664d40d35931dd19700000000000000000000000000000000000000000000000000000000000000140e73796d6d6574726963616c626f7903636f6d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000059002b080200015180645b32ac6451e7c4b5d703636f6d000e73796d6d6574726963616c626f7903636f6d00002b000100015180002409430d02d150889dfe95f2f1f802a6bad11195802cf4763e068bfd93018c42c70a628cbc0000000000000000000000000000000000000000000000000000000000000000000000000000a02b1b47a4eb96c2247f7e9f7f69ff5ff3ce1a448393420f4922b2e4ac83b4716f9022e1748ede1014176d279d49245388e15c548205d5aa0372e76322d9b8b4bfc1a7f0a29285a5b23032aa0cc54660b7bdda744472ee29e90259b57db0bcfaa10fef2cab3abe929843176064b50e7a40ab454d0c4118203a89e14fd07c39a1a209b9186f2230f4a580eed4ca1970048aca40302c9e17a68cb31f125b40e8637a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000ea00300d0200000e1064844ffb6433e47b09430e73796d6d6574726963616c626f7903636f6d000e73796d6d6574726963616c626f7903636f6d000030000100000e1000440100030da09311112cf9138818cd2feae970ebbd4d6a30f6088c25b325a39abbc5cd1197aa098283e5aaf421177c2aa5d714992a9957d1bcc18f98cd71f1f1806b65e1480e73796d6d6574726963616c626f7903636f6d000030000100000e1000440101030d99db2cc14cabdc33d6d77da63a2f15f71112584f234e8d1dc428e39e8a4a97e1aa271a555dc90701e17e2a4c4b6f120b7c32d44f4ac02bd894cf2d4be7778a19000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f04192d35f0b8767efa18323a12a8f8014807169f2247b8b8937f9de04f278139e268e6801be075d011134c8940ccd1429d70a6cb567c9162be5d6f89c16e23a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000007600100d030000012c645433496451742986c90e73796d6d6574726963616c626f7903636f6d00045f656e730e73796d6d6574726963616c626f7903636f6d00001000010000012c002d2c613d307833623663464231644435313161663931463233663464413636346434304433353933314464313937000000000000000000000000000000000000000000000000000000000000000000000000000000000040e913a4ac4cacdc032744120bbc34178744ebd3d21cf2f2983e6406a12a00720fefea6030c62c92bb1f8cf35223902015448534fea3b8f0cd49b4a14bf677787e00000000000000000000000000000000000000000000000000000000000001cc03636f6d00003000010001518000a80100030803010001a7f34fc4b78c9bd8799d2fdaaea8b792f209e63795d42f52b0c17839ad7f826ce1948734afcb3d93bc18640169bb2ad1db139b5bab1a38d5ee3f1e5ad7445c819958163c9c4d9036667ad41d97ef156a2464e7d50951cf81dd7aa0ce00bd93c94fcfe1c23ab2afd7f310ace248f6bc199560434c30d1185e52161bbe2e285fccad93f7fe9f088e214117625eb378ca664e9663d6353a24059a8f49cde57353e303636f6d0000300001000151800106010103080103c3ce574d98cbd9157e0d70d274b849ca0e0eed9affc5dccc9047496906655c35cb08b33c4d171b017ca356f4960262aa6293cdfae8b13b55b21c351cdfa7687d38ef07465f87f84d3ccdab8af24edebd6126bbfea877ed9ba2080fa2211f18dcaf34f69223b14e22ba03b27c3fb5a820cc7457d59ed23a23a23d63cd230494c96399efd566710d462e40ba36562f1b71f0626ca742fea81701affca10b4b0ed949dadb4d0d075ef65ba8c508ec168cb249af826d46ee8299d58885ecef62a1535cd3eec049baa664ded9f7c10653f421d8afc18147bc1ecd1755c74f2abb72627a101dddb29ca3dc30c953122876ff61c31e344f2766b2c08a4a367bf8a0fa3f0000000000000000000000000000000000000000";
// Create serializedTx and remove the "0x" prefix
const value = "3.1";
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);
const devices = [
   {
     name: "nanos",
     label: "Nano S",
     steps: 18, // <= Define the number of steps for this test case and this device
   },
  {
    name: "nanox",
    label: "Nano X",
    steps: 9, // <= Define the number of steps for this test case and this device
  },
  {
     name: "nanosp",
     label: "Nano S+",
     steps: 9, // <= Define the number of steps for this test case and this device
   },
];

devices.forEach((device) =>
  processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
