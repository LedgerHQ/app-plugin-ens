import { processTest, populateTransaction } from "./test.fixture";

const contractName = "ETHRegistrar"; // <= Name of the smart contract

const testLabel = "eth_resolver_multicall"; // <= Name of the test
const testDirSuffix = "eth_resolver_multicall"; // <= directory to compare device snapshots to
const testNetwork = "ethereum";
const signedPlugin = false;

const contractAddr = "0x231b0ee14048e9dccd1d247744d114a4eb5e8e63"; // <= Address of the smart contract
const chainID = 1;

// From : https://etherscan.io/tx/0x75404d3e9f83d6e4a60f7df4e6f00ac41050c7765adf0d65be8179b20a8bb7e1
const inputData = "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000084623195b04827120fb4b697fb1815645b0aa4463794554a6d11e14ccb0cc686d94ee91bb700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012410f13a8c4827120fb4b697fb1815645b0aa4463794554a6d11e14ccb0cc686d94ee91bb7000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002468747470733a2f2f6c616e642e7068696c616e642e78797a2f6d7661737673652e65746800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002468747470733a2f2f6c616e642e7068696c616e642e78797a2f6d7661737673652e6574680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
// Create serializedTx and remove the "0x" prefix
const value = "3.1";
const serializedTx = populateTransaction(contractAddr, inputData, chainID, value);
const devices = [
   {
     name: "nanos",
     label: "Nano S",
     steps: 11, // <= Define the number of steps for this test case and this device
   },
  {
    name: "nanox",
    label: "Nano X",
    steps: 7, // <= Define the number of steps for this test case and this device
  },
  {
     name: "nanosp",
     label: "Nano S+",
     steps: 7, // <= Define the number of steps for this test case and this device
   },
];

devices.forEach((device) =>
  processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork)
);
